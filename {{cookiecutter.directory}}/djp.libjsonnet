local ddb = import 'ddb.docker.libjsonnet';

local defaultName = ddb.File(std.thisFile).parent.name;
local domain_ext = std.extVar("core.domain.ext");
local domain_sub = std.extVar("core.domain.sub");
local domain = std.join('.', [domain_sub, domain_ext]);

local factory(name, params={}) =
    local o = {
        port: ddb.params.value(params, 'port', 8080),
        domain: ddb.params.value(params, 'domain', domain)
    };

	{
        networks: {
            'zap-proxy': {
              driver: 'bridge',
            }
        },
        services+: {
            [name]+:
                ddb.Build(defaultName)  +
                ddb.Binary("zap.sh", "/project", "zap.sh") +
                ddb.VirtualHost(o.port, std.join('.', ["zap-proxy", o.domain]), "zap-proxy") +
                ddb.Expose(o.port) +
                {
                    networks: ['zap-proxy'],
                    environment+: {},
                    volumes+: [
                     ddb.path.project + ":/project",
                    ]
                }
        }
	};

{
  factory: factory,
  defaultName: defaultName
}